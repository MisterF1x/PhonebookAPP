{"version":3,"file":"static/js/998.b37392a8.chunk.js","mappings":"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","sources":["components/Filter/Filter.js","components/NumberField/NumberField.js","components/ContactForm/ContactForm.js","components/Contacts/Contacts.js","pages/ContactsPage.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { setValue } from 'redux/filterSlice';\nimport { selectorFilter } from 'redux/selector';\nimport {\n  FilledInput,\n  FormControl,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n} from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useState } from 'react';\n\nexport const ContactsFilter = () => {\n  const [showIcon, setShowIcon] = useState(false);\n  const dispatch = useDispatch();\n  const filter = useSelector(selectorFilter);\n  return (\n    <FormControl variant=\"filled\">\n      <InputLabel htmlFor=\"filled-adornment-password\">\n        Find contacts by name\n      </InputLabel>\n      <FilledInput\n        sx={{ maxWidth: '30ch' }}\n        size=\"small\"\n        value={filter}\n        onFocus={() => setShowIcon(true)}\n        onChange={e => dispatch(setValue(e.currentTarget.value.trim()))}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            {showIcon && (\n              <IconButton\n                type=\"reset\"\n                aria-label=\"reset button\"\n                onClick={() => {\n                  dispatch(setValue(''));\n                  setShowIcon(false);\n                }}\n                edge=\"end\"\n              >\n                <ClearIcon />\n              </IconButton>\n            )}\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n","import { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { PatternFormat } from 'react-number-format';\n\nexport const NumericFormatCustom = forwardRef(function NumericFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, ...other } = props;\n\n  return (\n    <PatternFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.formattedValue,\n          },\n        });\n      }}\n      format=\"+380 (##) ### ####\"\n      mask=\"_\"\n    />\n  );\n});\nNumericFormatCustom.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorContacts } from 'redux/selector';\nimport { addContact } from 'redux/operation';\nimport { NumericFormatCustom } from 'components/NumberField/NumberField';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  InputAdornment,\n  TextField,\n} from '@mui/material';\nimport PersonIcon from '@mui/icons-material/Person';\nimport PhoneIcon from '@mui/icons-material/Phone';\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string('Enter your name')\n    .required('Name is required')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .min(9, 'Phone number must be at least 9 digits')\n    .required('Phone number is required')\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\nexport const ContactForm = () => {\n  const { items } = useSelector(selectorContacts);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, number }, { resetForm, setSubmitting }) => {\n      const contact = {\n        name,\n        number,\n      };\n      const hasName = items.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      );\n      if (hasName) return window.alert(`${name} is allready in contacts`);\n      dispatch(addContact(contact));\n      setSubmitting(false);\n      resetForm();\n    },\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{ mx: 'auto', mb: 5, mt: 2, maxWidth: '50ch' }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={formik.handleSubmit}\n    >\n      <TextField\n        sx={{ mb: 2 }}\n        fullWidth\n        name=\"name\"\n        label=\"Name\"\n        type=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <PersonIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n      <TextField\n        sx={{ mb: 2 }}\n        fullWidth\n        name=\"number\"\n        label=\"Phone\"\n        type=\"tel\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n        InputProps={{\n          inputComponent: NumericFormatCustom,\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <PhoneIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n      <Button\n        disabled={formik.isSubmitting}\n        color=\"primary\"\n        variant=\"contained\"\n        fullWidth\n        type=\"submit\"\n      >\n        {formik.isSubmitting ? (\n          <CircularProgress size={25} color=\"inherit\" />\n        ) : (\n          'Add contact'\n        )}\n      </Button>\n    </Box>\n  );\n};\n","import DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts, selectorContacts } from 'redux/selector';\nimport { deleteContact } from 'redux/operation';\nimport {\n  Avatar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Skeleton,\n  Stack,\n} from '@mui/material';\nimport { stringAvatar } from 'helpers/helpers';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  const { isLoading } = useSelector(selectorContacts);\n  const sortedContacts = contacts.sort((a, b) =>\n    a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n  );\n  return (\n    <List>\n      {sortedContacts.map(({ id, name, phone }) => {\n        return (\n          <ListItem divider={true} key={id}>\n            <ListItemAvatar sx={{ textTransform: 'uppercase' }}>\n              {isLoading ? (\n                <Skeleton variant=\"circular\" width={40} height={40} />\n              ) : (\n                <Avatar {...stringAvatar(name)}></Avatar>\n              )}\n            </ListItemAvatar>\n\n            {isLoading ? (\n              <Stack width=\"70%\">\n                <Skeleton\n                  variant=\"text\"\n                  width=\"70%\"\n                  sx={{ fontSize: '1rem' }}\n                />\n                <Skeleton\n                  variant=\"text\"\n                  width=\"30%\"\n                  sx={{ fontSize: '1rem' }}\n                />\n              </Stack>\n            ) : (\n              <ListItemText primary={name} secondary={phone} />\n            )}\n\n            {isLoading ? (\n              <Skeleton\n                sx={{ ml: 'auto' }}\n                variant=\"circular\"\n                width={30}\n                height={30}\n              />\n            ) : (\n              <IconButton\n                aria-label=\"delete\"\n                title=\"delete\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                <DeleteIcon />\n              </IconButton>\n            )}\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n","import { ContactsFilter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectorContacts, selectorUserIsLoading } from 'redux/selector';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operation';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Alert, AlertTitle, Box, Snackbar, Typography } from '@mui/material';\nimport { resetError } from 'redux/contactsSlice';\nimport { RiContactsBookFill } from 'react-icons/ri';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const { items, error } = useSelector(selectorContacts);\n  const isLoading = useSelector(selectorUserIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Box\n      sx={{\n        maxWidth: '50ch',\n        mx: 'auto',\n        px: 2,\n      }}\n    >\n      <Typography variant=\"h3\" component=\"h1\">\n        Contacts\n      </Typography>\n      <ContactForm />\n      {!!items.length || isLoading ? (\n        <>\n          <ContactsFilter />\n          <Contacts />\n        </>\n      ) : (\n        <Box\n          sx={{\n            flexDirection: 'column',\n            display: 'flex',\n            alignItems: 'center',\n          }}\n        >\n          <RiContactsBookFill size={70} />\n          <Typography align=\"center\" variant=\"h5\" component=\"h2\" sx={{ mt: 3 }}>\n            No Contacts have been created yet.\n          </Typography>\n        </Box>\n      )}\n\n      {error && (\n        <Snackbar\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          open={!!error}\n          autoHideDuration={4000}\n          onClose={() => {\n            dispatch(resetError());\n          }}\n        >\n          <Alert severity=\"error\">\n            <AlertTitle>Error</AlertTitle>\n            Oops, something went wrong! <strong>Try again later!</strong>\n          </Alert>\n        </Snackbar>\n      )}\n    </Box>\n  );\n};\nexport default ContactsPage;\n"],"names":["ContactsFilter","_useState","useState","_useState2","_slicedToArray","showIcon","setShowIcon","dispatch","useDispatch","filter","useSelector","selectorFilter","_jsxs","FormControl","variant","children","_jsx","InputLabel","htmlFor","FilledInput","sx","maxWidth","size","value","onFocus","onChange","e","setValue","currentTarget","trim","endAdornment","InputAdornment","position","IconButton","type","onClick","edge","ClearIcon","NumericFormatCustom","forwardRef","props","ref","other","_objectWithoutProperties","_excluded","PatternFormat","_objectSpread","getInputRef","onValueChange","values","target","name","formattedValue","format","mask","validationSchema","yup","shape","required","matches","number","min","ContactForm","items","selectorContacts","formik","useFormik","initialValues","onSubmit","_ref","_ref2","resetForm","setSubmitting","contact","hasName","some","toLowerCase","window","alert","concat","addContact","Box","component","mx","mb","mt","noValidate","autoComplete","handleSubmit","TextField","fullWidth","label","handleChange","error","touched","Boolean","errors","helperText","InputProps","startAdornment","PersonIcon","inputComponent","PhoneIcon","Button","disabled","isSubmitting","color","CircularProgress","Contacts","contacts","selectVisibleContacts","isLoading","sortedContacts","sort","a","b","localeCompare","List","map","id","phone","ListItem","divider","ListItemAvatar","textTransform","Skeleton","width","height","Avatar","stringAvatar","Stack","fontSize","ListItemText","primary","secondary","ml","title","deleteContact","DeleteIcon","_useSelector","selectorUserIsLoading","useEffect","fetchContacts","px","Typography","length","_Fragment","flexDirection","display","alignItems","RiContactsBookFill","align","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","resetError","Alert","severity","AlertTitle"],"sourceRoot":""}